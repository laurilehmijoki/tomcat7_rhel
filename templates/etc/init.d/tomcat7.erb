#!/bin/bash
#
# tomcat7      This shell script takes care of starting and stopping Tomcat
#
# chkconfig: 234 80 20
#
### BEGIN INIT INFO
# Provides: tomcat7
# Required-Start: $network $syslog
# Required-Stop: $network $syslog
# Default-Start:
# Default-Stop:
# Description: Release implementation for Servlet 2.5 and JSP 2.1
# Short-Description: start and stop tomcat
### END INIT INFO
#
# - originally written by Henri Gomez, Keith Irwin, and Nicolas Mailhot
# - heavily rewritten by Deepak Bhole and Jason Corley
# - rewritten by Mark Jaffe to ENSURE it starts & stops reliably

## Source function library.
#. /etc/rc.d/init.d/functions
# Source LSB function library.
if [ -r /lib/lsb/init-functions ]; then
    . /lib/lsb/init-functions
else
    echo "Missing init-functions"
    exit 1
fi

NAME="$(basename $0)"
unset ISBOOT
if [ "${NAME:0:1}" = "S" -o "${NAME:0:1}" = "K" ]; then
    NAME="${NAME:3}"
    ISBOOT="1"
fi

# For SELinux we need to use 'runuser' not 'su'
if [ -x "/sbin/runuser" ]; then
    SU="/sbin/runuser"
else
    SU="/bin/su"
fi

# Get the tomcat config (use this for environment specific settings)
TOMCAT_CFG="/etc/tomcat7/tomcat7.conf"
if [ -r "$TOMCAT_CFG" ]; then
    . $TOMCAT_CFG
fi

# Get instance specific config file
if [ -r "/etc/sysconfig/${NAME}" ]; then
    . /etc/sysconfig/${NAME}
fi

# Define amount of time (seconds) to allow tomcat to start
STARTUP_WAIT="${STARTUP_WAIT:-200}"   # set default value if undefined
SHUTDOWN_WAIT="${SHUTDOWN_WAIT:-10}"  # set default value if undefined

# Define which connector port to use
CONNECTOR_PORT="${CONNECTOR_PORT:-8080}"

# Path to the tomcat launch script
TOMCAT_SCRIPT="/usr/sbin/dtomcat7"

# Tomcat program name
TOMCAT_PROG="${NAME}"

# Define the tomcat username
TOMCAT_USER="${TOMCAT_USER:-tomcat}"

# Define the tomcat log file
TOMCAT_LOG="${TOMCAT_LOG:-/var/log/tomcat7/catalina.out}"

# Derive the application-name
TOMCAT_APP=$(/bin/find ${CATALINA_BASE}/webapps -type d | grep -v INF | sort -u | tail -1 | awk -F/ '{print $NF}')

RETVAL="0"

function makeHomeDir() {
    if [ ! -d "$CATALINA_HOME" ]; then
        echo "$CATALINA_HOME does not exist, creating"
        if [ ! -d "/usr/share/${NAME}" ]; then
            mkdir /usr/share/${NAME}
            cp -pLR /usr/share/tomcat7/* /usr/share/${NAME}
        fi
        mkdir -p /var/log/${NAME} \
                 /var/cache/${NAME} \
                 /var/tmp/${NAME}
        ln -fs /var/cache/${NAME} ${CATALINA_HOME}/work
        ln -fs /var/tmp/${NAME} ${CATALINA_HOME}/temp
        cp -pLR /usr/share/${NAME}/bin $CATALINA_HOME
        cp -pLR /usr/share/${NAME}/conf $CATALINA_HOME
        ln -fs /usr/share/java/tomcat7 ${CATALINA_HOME}/lib
        ln -fs /usr/share/tomcat7/webapps ${CATALINA_HOME}/webapps
        chown ${TOMCAT_USER}:${TOMCAT_USER} /var/log/${NAME}
    fi
}

function parseOptions() {
    options=""
    options="$options $(
                 awk '!/^#/ && !/^$/ { ORS=" "; print "export ", $0, ";" }' \
                 $TOMCAT_CFG
             )"
    if [ -r "/etc/sysconfig/${NAME}" ]; then
        options="$options $(
                     awk '!/^#/ && !/^$/ { ORS=" ";
                                           print "export ", $0, ";" }' \
                     /etc/sysconfig/${NAME}
                 )"
    fi
    TOMCAT_SCRIPT="$options ${TOMCAT_SCRIPT}"
}

# See how we were called.
function start() {
    echo -n "Starting ${TOMCAT_PROG}: "
# First check if already running
    TOMCAT_PID=$(ps -ef | grep java | grep tomcat | grep -v grep | awk '{print $2}' | tr -d '\r')
    if [ -n "$TOMCAT_PID" ]; then
        echo "Tomcat is running"
        exit 1
    fi
    # fix permissions on the log and pid files
    export CATALINA_PID="/var/run/${NAME}.pid"
    touch $CATALINA_PID
    chown ${TOMCAT_USER}:${TOMCAT_USER} $CATALINA_PID
    touch $TOMCAT_LOG
    chown ${TOMCAT_USER}:${TOMCAT_USER} $TOMCAT_LOG
    if [ "$CATALINA_HOME" != "/usr/share/tomcat7" ]; then
        # Create a tomcat directory if it doesn't exist
        makeHomeDir
    fi
# CPG-3664: prevent reading configs multiple times
    if [ "$TOMCAT_SCRIPT" == "/usr/sbin/tomcat7" ]; then
        parseOptions
    fi
    if [ "$SECURITY_MANAGER" = "true" ]; then
        $SU - $TOMCAT_USER -c "${TOMCAT_SCRIPT} start-security" >> $TOMCAT_LOG 2>&1
    else
        $SU - $TOMCAT_USER -c "${TOMCAT_SCRIPT} start" >> $TOMCAT_LOG 2>&1
    fi
    RETVAL="$?"
    if [ "$RETVAL" -eq 0 ]; then
        log_success_msg
        touch /var/lock/subsys/${NAME}
    else
        log_failure_msg
    fi
    time {
    let count=0
    echo -n "Waiting for service availability"
    while [ -z "$(curl http://localhost:${CONNECTOR_PORT}/${TOMCAT_APP} 2> /dev/null)" ]; do
        let count=$((${count}+1))
        echo -n "."; sleep 1
        if [ $count -gt ${STARTUP_WAIT} ]; then
            echo " " Something is wrong, it should not take so long to startup ${TOMCAT_APP}
            exit 1
        fi
    done
    echo " " Service is Up!
    }
    return $RETVAL
}

## Improved stop function
function stop() {
    RETVAL="0"
    echo -n "Stopping ${TOMCAT_PROG}: "
    TOMCAT_PID=$(ps -ef | grep java | grep tomcat | grep -v grep | awk '{print $2}')
    if [ -z "$TOMCAT_PID" ]; then
        log_success_msg
        echo Tomcat was not running
        exit 0
    fi
    if [ -n "$TOMCAT_PID" ]; then
        parseOptions
        $SU - $TOMCAT_USER -c "${TOMCAT_SCRIPT} stop" >> $TOMCAT_LOG 2>&1
        count=0
        if [ -f "/var/run/${NAME}.pid" ]; then
            read kpid < /var/run/${NAME}.pid
        else
            kpid="$TOMCAT_PID"
        fi
        until [ $(ps --pid $kpid | grep -c $kpid) -eq 0 ] || \
              [ $count -gt $SHUTDOWN_WAIT ]; do
            if [ "$SHUTDOWN_VERBOSE" = "true" ]; then
                echo "waiting for processes $kpid to exit"
            fi
            echo -n "."; sleep 1
            let count=$((${count}+1))
        done
        if [ $count -gt $SHUTDOWN_WAIT ]; then
            if [ "$SHUTDOWN_VERBOSE" = "true" ]; then
                echo "killing processes which did not stop after $SHUTDOWN_WAIT seconds"
            fi
            kill -9 $kpid
        fi
        RETVAL=0
        log_success_msg
        rm -f /var/lock/subsys/${NAME} /var/run/${NAME}.pid
    else
        log_success_msg
        rm -f /var/lock/subsys/${NAME} /var/run/${NAME}.pid
    fi
    return $RETVAL
}

# See how we were called.
case "$1" in
    start)
        start
        ;;
    stop)
        stop
        RETVAL=$?
        if [ $RETVAL -ne 0 ]; then
            stop
        fi
        ;;
    restart)
        stop
        RETVAL=$?
        if [ $RETVAL -eq 0 ]; then
            sleep 2
            start
        else
            stop
            sleep 2
            start
        fi
        ;;
    status)
        pid=$(/usr/bin/pgrep -d , -u ${TOMCAT_USER} -G ${TOMCAT_USER} java)
        if [ -z "$pid" ]; then
            echo "${NAME} is stopped"
            RETVAL="3"
        else
            echo "${NAME} with pid $pid is running..."
            RETVAL="0"
        fi
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|status}"
        RETVAL="2"
esac

exit $RETVAL
